<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="_flash_8c" kind="file" language="C++">
    <compoundname>Flash.c</compoundname>
    <includes refid="_flash_8h" local="yes">Flash.h</includes>
    <includes local="yes">device\MK64F12.h</includes>
    <incdepgraph>
      <node id="5">
        <label>stdbool.h</label>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
      <node id="1">
        <label>C:/Users/Jeong/git/04/Modules/Flash/Flash.c</label>
        <link refid="_flash_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Flash.h</label>
        <link refid="_flash_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Types\types.h</label>
        <link refid="types_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>device\MK64F12.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group___flash__module_1gac0181349b31f7dbeef69e296c7a97a2b" prot="public" static="no" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t FLASH_ERASE_SECTOR</definition>
        <argsstring></argsstring>
        <name>FLASH_ERASE_SECTOR</name>
        <initializer>= 0x09</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flash command erase sector </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" line="23" column="15" bodyfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___flash__module_1ga5ab5f1fd69f920ee5bf0b56493046332" prot="public" static="no" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t FLASH_WRITE_PHRASE</definition>
        <argsstring></argsstring>
        <name>FLASH_WRITE_PHRASE</name>
        <initializer>= 0x07</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flash command write phrase </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" line="24" column="15" bodyfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___flash__module_1ga24ca5c7e2928095bf07ab6f6a98679c6" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool ByteFlash[8]</definition>
        <argsstring>[8]</argsstring>
        <name>ByteFlash</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>virtual memory for flash </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" line="27" column="13" bodyfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___flash__module_1ga5f0979e9c65831382ec3a18d971ac8eb" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int AddressFlash[8]</definition>
        <argsstring>[8]</argsstring>
        <name>AddressFlash</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>flash address sector </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" line="29" column="12" bodyfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" bodystart="29" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___flash__module_1gaa5782279b5e558cafc2f135c0a1177d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Flash_Init</definition>
        <argsstring>(void)</argsstring>
        <name>Flash_Init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Enables the Flash module. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool - TRUE if the Flash was setup successfully. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" line="32" column="6" bodyfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" bodystart="32" bodyend="43" declfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.h" declline="64" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___flash__module_1ga50871aff0f5af1e092aea3ed2545cf72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Flash_AllocateVar</definition>
        <argsstring>(volatile void **variable, const uint8_t size)</argsstring>
        <name>Flash_AllocateVar</name>
        <param>
          <type>volatile void **</type>
          <declname>variable</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocates space for a non-volatile variable in the Flash memory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>variable</parametername>
</parameternamelist>
<parameterdescription>
<para>is the address of a pointer to a variable that is to be allocated space in Flash memory. The pointer will be allocated to a relevant address: If the variable is a byte, then any address. If the variable is a half-word, then an even address. If the variable is a word, then an address divisible by 4. This allows the resulting variable to be used with the relevant Flash_Write function which assumes a certain memory address. e.g. a 16-bit variable will be on an even address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size, in bytes, of the variable that is to be allocated space in the Flash memory. Valid values are 1, 2 and 4. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool - TRUE if the variable was allocated space in the Flash memory. </para>
</simplesect>
<simplesect kind="note"><para>Assumes Flash has been initialized. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" line="46" column="6" bodyfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" bodystart="46" bodyend="110" declfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.h" declline="79" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___flash__module_1ga82437eff368716c682ca7a082bba1357" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool LaunchCommand</definition>
        <argsstring>(FCCOB_t *commonCommandObject)</argsstring>
        <name>LaunchCommand</name>
        <param>
          <type><ref refid="struct_f_c_c_o_b__t" kindref="compound">FCCOB_t</ref> *</type>
          <declname>commonCommandObject</declname>
        </param>
        <briefdescription>
<para>Checks the status of Flash register and launches the command given. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>commonCommandObject</parametername>
</parameternamelist>
<parameterdescription>
<para>a structure variable to store data to be written into flash.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool - TRUE if flash command was written properly </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" line="118" column="13" bodyfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" bodystart="118" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="group___flash__module_1ga0fc992308ad53593bdc6f6e015c2924c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool WritePhrase</definition>
        <argsstring>(const uint32_t address, const uint64union_t phrase)</argsstring>
        <name>WritePhrase</name>
        <param>
          <type>const uint32_t</type>
          <declname>address</declname>
        </param>
        <param>
          <type>const <ref refid="unionuint64union__t" kindref="compound">uint64union_t</ref></type>
          <declname>phrase</declname>
        </param>
        <briefdescription>
<para>Writes a phrase into the <ref refid="struct_f_c_c_o_b__t" kindref="compound">FCCOB_t</ref> structure and launch write command to flash. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>32 bit integer of address to be written to flash </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phrase</parametername>
</parameternamelist>
<parameterdescription>
<para>64 bit of data to be written to flash. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool - TRUE if the packet was handled successfully. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" line="169" column="13" bodyfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" bodystart="169" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="group___flash__module_1gac37c5dc906e2c2635d9d8ccda0e4af8d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool ModifyPhrase</definition>
        <argsstring>(const uint32_t address, const uint64union_t phrase)</argsstring>
        <name>ModifyPhrase</name>
        <param>
          <type>const uint32_t</type>
          <declname>address</declname>
        </param>
        <param>
          <type>const <ref refid="unionuint64union__t" kindref="compound">uint64union_t</ref></type>
          <declname>phrase</declname>
        </param>
        <briefdescription>
<para>Modifies the current phrase. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>32 bit integer of address to be written to flash </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phrase</parametername>
</parameternamelist>
<parameterdescription>
<para>64 bit of data to be written to flash. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool - TRUE if the phrase was written properly. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" line="188" column="13" bodyfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" bodystart="188" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="group___flash__module_1ga5da7dcc0c6ef765546c79bbe25b48479" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Flash_Write32</definition>
        <argsstring>(volatile uint32_t *const address, const uint32_t data)</argsstring>
        <name>Flash_Write32</name>
        <param>
          <type>volatile uint32_t *const</type>
          <declname>address</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Writes a 32-bit number to Flash. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The 32-bit data to write. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool - TRUE if Flash was written successfully, FALSE if address is not aligned to a 4-byte boundary or if there is a programming error. </para>
</simplesect>
<simplesect kind="note"><para>Assumes Flash has been initialized. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; Carries high and low phrase components</para>
<para>&lt; Start address</para>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" line="195" column="6" bodyfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" bodystart="195" bodyend="212" declfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.h" declline="88" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___flash__module_1ga1458f5e4ac15e1848ae0bde32fe5b5f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Flash_Write16</definition>
        <argsstring>(volatile uint16_t *const address, const uint16_t data)</argsstring>
        <name>Flash_Write16</name>
        <param>
          <type>volatile uint16_t *const</type>
          <declname>address</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Writes a 16-bit number to Flash. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The 16-bit data to write. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool - TRUE if Flash was written successfully, FALSE if address is not aligned to a 2-byte boundary or if there is a programming error. </para>
</simplesect>
<simplesect kind="note"><para>Assumes Flash has been initialized. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; Carries high and low word components</para>
<para>&lt; Start address</para>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" line="215" column="6" bodyfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" bodystart="215" bodyend="232" declfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.h" declline="97" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___flash__module_1ga1e6f34b272d8ed7b0f897b43e65f2cc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Flash_Write8</definition>
        <argsstring>(volatile uint8_t *const address, const uint8_t data)</argsstring>
        <name>Flash_Write8</name>
        <param>
          <type>volatile uint8_t *const</type>
          <declname>address</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Writes an 8-bit number to Flash. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The 8-bit data to write. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool - TRUE if Flash was written successfully, FALSE if there is a programming error. </para>
</simplesect>
<simplesect kind="note"><para>Assumes Flash has been initialized. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; Carries high and low half-word components</para>
<para>&lt; Start address</para>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" line="235" column="6" bodyfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" bodystart="235" bodyend="253" declfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.h" declline="106" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___flash__module_1ga04fd4b98ef4ea1b033801d9c0d574849" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool EraseSector</definition>
        <argsstring>(const uint32_t address)</argsstring>
        <name>EraseSector</name>
        <param>
          <type>const uint32_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Erases the entire Flash sector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool - TRUE if the Flash &quot;data&quot; sector was erased successfully. </para>
</simplesect>
<simplesect kind="note"><para>Assumes Flash has been initialized. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" line="262" column="13" bodyfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" bodystart="262" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="group___flash__module_1ga06868787ccef73e69bd236d3b93b68f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Flash_Erase</definition>
        <argsstring>(void)</argsstring>
        <name>Flash_Erase</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Erases the entire Flash sector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool - TRUE if the Flash &quot;data&quot; sector was erased successfully. </para>
</simplesect>
<simplesect kind="note"><para>Assumes Flash has been initialized. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" line="272" column="6" bodyfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" bodystart="272" bodyend="275" declfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.h" declline="113" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Routines for erasing and writing to the Flash. </para>
    </briefdescription>
    <detaileddescription>
<para>This contains the functions needed for accessing the internal Flash.</para>
<para><simplesect kind="author"><para>Jeong Bin Lee and George El Bazouni </para>
</simplesect>
<simplesect kind="date"><para>2020-04-15 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="16"><highlight class="comment">//<sp/>new<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//#include<sp/>&quot;Types\types.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_flash_8h" kindref="compound">Flash.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;device\MK64F12.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//Flash<sp/>Commands</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="group___flash__module_1gac0181349b31f7dbeef69e296c7a97a2b" kindref="member">FLASH_ERASE_SECTOR</ref><sp/>=<sp/>0x09;<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="group___flash__module_1ga5ab5f1fd69f920ee5bf0b56493046332" kindref="member">FLASH_WRITE_PHRASE</ref><sp/>=<sp/>0x07;<sp/></highlight></codeline>
<codeline lineno="27"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ByteFlash[8];<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>AddressFlash[8];<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group___flash__module_1gaa5782279b5e558cafc2f135c0a1177d3" kindref="member">Flash_Init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;<sp/><sp/></highlight><highlight class="comment">//count<sp/>int<sp/>to<sp/>initialise<sp/>all<sp/>8<sp/>bytes<sp/>of<sp/>used<sp/>flash<sp/>sector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>8;<sp/>i++)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>ByteFlash[i]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//if<sp/>memory<sp/>slot<sp/>is<sp/>empty<sp/>==<sp/>true,<sp/>if<sp/>not<sp/>empty<sp/>==<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>AddressFlash[i]<sp/>=<sp/><sp/>FLASH_DATA_START<sp/>+<sp/>i;<sp/><sp/></highlight><highlight class="comment">//0x0008<sp/>0000<sp/>---<sp/>0x0008<sp/>0007</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group___flash__module_1ga50871aff0f5af1e092aea3ed2545cf72" kindref="member">Flash_AllocateVar</ref>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>variable,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>size)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/>1)<sp/><sp/></highlight><highlight class="comment">//check<sp/>if<sp/>size<sp/>==<sp/>1<sp/>(1<sp/>byte)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//first<sp/>check<sp/>if<sp/>the<sp/>address<sp/>is<sp/>empty<sp/>or<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>not<sp/>empty,<sp/>go<sp/>to<sp/>next<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>empty<sp/>use<sp/>that<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>8;<sp/>i<sp/>+=<sp/>size)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ByteFlash[i])</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*variable<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>AddressFlash[i];</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ByteFlash[i]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/>2)<sp/><sp/></highlight><highlight class="comment">//check<sp/>if<sp/>size<sp/>==<sp/>2<sp/>(half<sp/>word)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//first<sp/>check<sp/>if<sp/>the<sp/>address<sp/>is<sp/>empty<sp/>or<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>not<sp/>empty,<sp/>go<sp/>to<sp/>next<sp/>memory<sp/>incremented<sp/>by<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>empty<sp/>use<sp/>that<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>8;<sp/>i<sp/>+=<sp/>size)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ByteFlash[i])</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*variable<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>AddressFlash[i];</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ByteFlash[i]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ByteFlash[i+1]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/>4)<sp/><sp/></highlight><highlight class="comment">//check<sp/>if<sp/>size<sp/>==<sp/>4<sp/>(word)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//first<sp/>check<sp/>if<sp/>the<sp/>address<sp/>is<sp/>empty<sp/>or<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>not<sp/>empty,<sp/>go<sp/>to<sp/>next<sp/>memory<sp/>incremented<sp/>by<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>empty<sp/>use<sp/>that<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>8;<sp/>i<sp/>+=<sp/>size)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ByteFlash[i])</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*variable<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>AddressFlash[i];</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ByteFlash[i]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ByteFlash[i+1]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ByteFlash[i+2]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ByteFlash[i+3]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/>8)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ByteFlash[0])</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*variable<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>AddressFlash[0];</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;size;<sp/>i++)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ByteFlash[i]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>LaunchCommand(<ref refid="struct_f_c_c_o_b__t" kindref="compound">FCCOB_t</ref>*<sp/>commonCommandObject)</highlight></codeline>
<codeline lineno="119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//wait<sp/>while<sp/>CCIF<sp/>is<sp/>1,<sp/>if<sp/>CCIF<sp/>is<sp/>0,<sp/>cannot<sp/>write<sp/>to<sp/>FCCOB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(FTFE-&gt;FSTAT<sp/>&amp;<sp/>FTFE_FSTAT_CCIF_MASK));</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//these<sp/>flags<sp/>must<sp/>be<sp/>cleared<sp/>before<sp/>launching<sp/>command<sp/>(before<sp/>writing<sp/>1<sp/>to<sp/>CCIF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//see<sp/>reference<sp/>manual<sp/>p.702</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((FTFE-&gt;FSTAT<sp/>&amp;<sp/>FTFE_FSTAT_FPVIOL_MASK)<sp/>==<sp/>FTFE_FSTAT_FPVIOL_MASK)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>FTFE-&gt;FSTAT<sp/>|=<sp/>FTFE_FSTAT_FPVIOL_MASK;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>success<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((FTFE-&gt;FSTAT<sp/>&amp;<sp/>FTFE_FSTAT_ACCERR_MASK)<sp/>==<sp/>FTFE_FSTAT_ACCERR_MASK)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>FTFE-&gt;FSTAT<sp/>|=<sp/>FTFE_FSTAT_ACCERR_MASK;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>success<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Set<sp/>FCCOB<sp/>in<sp/>terms<sp/>of<sp/>big<sp/>endian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>FTFE-&gt;FCCOB0<sp/>=<sp/>commonCommandObject-&gt;Flash_Command;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>FTFE-&gt;FCCOB1<sp/>=<sp/>commonCommandObject-&gt;Address.s.Flash_Address[2];</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>FTFE-&gt;FCCOB2<sp/>=<sp/>commonCommandObject-&gt;Address.s.Flash_Address[1];</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>FTFE-&gt;FCCOB3<sp/>=<sp/>commonCommandObject-&gt;Address.s.Flash_Address[0];</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>FTFE-&gt;FCCOB4<sp/>=<sp/>commonCommandObject-&gt;Data.s.Flash_DataByte[3];</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>FTFE-&gt;FCCOB5<sp/>=<sp/>commonCommandObject-&gt;Data.s.Flash_DataByte[2];</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>FTFE-&gt;FCCOB6<sp/>=<sp/>commonCommandObject-&gt;Data.s.Flash_DataByte[1];</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>FTFE-&gt;FCCOB7<sp/>=<sp/>commonCommandObject-&gt;Data.s.Flash_DataByte[0];</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>FTFE-&gt;FCCOB8<sp/>=<sp/>commonCommandObject-&gt;Data.s.Flash_DataByte[7];</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>FTFE-&gt;FCCOB9<sp/>=<sp/>commonCommandObject-&gt;Data.s.Flash_DataByte[6];</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>FTFE-&gt;FCCOBA<sp/>=<sp/>commonCommandObject-&gt;Data.s.Flash_DataByte[5];</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>FTFE-&gt;FCCOBB<sp/>=<sp/>commonCommandObject-&gt;Data.s.Flash_DataByte[4];</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//after<sp/>writing<sp/>to<sp/>FCCOB,<sp/>set<sp/>CCIF<sp/>to<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>FTFE-&gt;FSTAT<sp/>|=<sp/>FTFE_FSTAT_CCIF_MASK;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//wait<sp/>while<sp/>command<sp/>complete<sp/>is<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(FTFE-&gt;FSTAT<sp/>&amp;<sp/>FTFE_FSTAT_CCIF_MASK));</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>success;</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>WritePhrase(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>address,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unionuint64union__t" kindref="compound">uint64union_t</ref><sp/>phrase)</highlight></codeline>
<codeline lineno="170"><highlight class="normal">{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><ref refid="struct_f_c_c_o_b__t" kindref="compound">FCCOB_t</ref><sp/>write;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//assign<sp/>write<sp/>phrase<sp/>command</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>write.Flash_Command<sp/>=<sp/><ref refid="group___flash__module_1ga5ab5f1fd69f920ee5bf0b56493046332" kindref="member">FLASH_WRITE_PHRASE</ref>;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//assign<sp/>address<sp/>to<sp/>be<sp/>written<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>write.Address.Flash_AllAddress<sp/>=<sp/>address;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//assign<sp/>given<sp/>phrase<sp/>to<sp/>the<sp/>structure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>write.Data.Flash_AllByte<sp/>=<sp/>phrase.l;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LaunchCommand(&amp;write);</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ModifyPhrase(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>address,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unionuint64union__t" kindref="compound">uint64union_t</ref><sp/>phrase)</highlight></codeline>
<codeline lineno="189"><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//first<sp/>erase<sp/>flash,<sp/>then<sp/>write<sp/>entire<sp/>phrase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group___flash__module_1ga06868787ccef73e69bd236d3b93b68f3" kindref="member">Flash_Erase</ref>()<sp/>&amp;&amp;<sp/>WritePhrase(address,<sp/>phrase);</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group___flash__module_1ga5da7dcc0c6ef765546c79bbe25b48479" kindref="member">Flash_Write32</ref>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>address,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>data)</highlight></codeline>
<codeline lineno="196"><highlight class="normal">{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><ref refid="unionuint64union__t" kindref="compound">uint64union_t</ref><sp/>Phrase;<sp/></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>uint32_t<sp/>WriteAddress<sp/>=<sp/>(uint32_t)address;<sp/></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((WriteAddress<sp/>/<sp/>4))<sp/>%<sp/>2<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">//checks<sp/>if<sp/>starting<sp/>address<sp/>is<sp/>at<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>Phrase.s.Lo<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>Phrase.s.Hi<sp/>=<sp/>_FW(WriteAddress<sp/>+<sp/>4);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ModifyPhrase(WriteAddress,<sp/>Phrase);<sp/></highlight><highlight class="comment">//Returns<sp/>phrase<sp/>to<sp/>be<sp/>written<sp/>in<sp/>flash<sp/>and<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>Phrase.s.Lo<sp/>=<sp/>_FW(WriteAddress<sp/>-<sp/>4);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>Phrase.s.Hi<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ModifyPhrase(WriteAddress<sp/>-<sp/>4,<sp/>Phrase);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group___flash__module_1ga1458f5e4ac15e1848ae0bde32fe5b5f3" kindref="member">Flash_Write16</ref>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint16_t*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>address,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>data)</highlight></codeline>
<codeline lineno="216"><highlight class="normal">{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><ref refid="unionuint32union__t" kindref="compound">uint32union_t</ref><sp/>Word;<sp/></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>uint32_t<sp/>WriteAddress<sp/>=<sp/>(uint32_t)address;<sp/></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(WriteAddress<sp/>%<sp/>4<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">//checks<sp/>if<sp/>starting<sp/>address<sp/>is<sp/>at<sp/>0<sp/>or<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>Word.s.Lo<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>Word.s.Hi<sp/>=<sp/>_FH(WriteAddress+2);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group___flash__module_1ga5da7dcc0c6ef765546c79bbe25b48479" kindref="member">Flash_Write32</ref>(&amp;(_FW(WriteAddress)),Word.l);<sp/></highlight><highlight class="comment">//Returns<sp/>word<sp/>to<sp/>be<sp/>written<sp/>in<sp/>flash<sp/>and<sp/>address<sp/>to<sp/>phrase<sp/>modifier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>Word.s.Lo<sp/>=<sp/>_FH(WriteAddress-2);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>Word.s.Hi<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group___flash__module_1ga5da7dcc0c6ef765546c79bbe25b48479" kindref="member">Flash_Write32</ref>(&amp;(_FW(WriteAddress-2)),Word.l);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group___flash__module_1ga1e6f34b272d8ed7b0f897b43e65f2cc0" kindref="member">Flash_Write8</ref>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint8_t*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>address,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>data)</highlight></codeline>
<codeline lineno="236"><highlight class="normal">{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><ref refid="unionuint16union__t" kindref="compound">uint16union_t</ref><sp/>Halfword;<sp/></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>uint32_t<sp/>WriteAddress<sp/>=<sp/>(uint32_t)address;<sp/></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(WriteAddress<sp/>%<sp/>2<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">//checks<sp/>if<sp/>starting<sp/>address<sp/>is<sp/>at<sp/>0,<sp/>2,<sp/>4,<sp/>or<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>Halfword.s.Lo<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>Halfword.s.Hi<sp/>=<sp/>_FB(WriteAddress+1);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group___flash__module_1ga1458f5e4ac15e1848ae0bde32fe5b5f3" kindref="member">Flash_Write16</ref>(&amp;(_FH(WriteAddress)),Halfword.l);<sp/></highlight><highlight class="comment">//Returns<sp/>half-word<sp/>to<sp/>be<sp/>written<sp/>in<sp/>flash<sp/>and<sp/>address<sp/>to<sp/>word<sp/>modifier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>Halfword.s.Lo<sp/>=<sp/>_FB(WriteAddress-1);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>Halfword.s.Hi<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group___flash__module_1ga1458f5e4ac15e1848ae0bde32fe5b5f3" kindref="member">Flash_Write16</ref>(&amp;(_FH(WriteAddress<sp/>-<sp/>1)),Halfword.l);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EraseSector(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>address)</highlight></codeline>
<codeline lineno="263"><highlight class="normal">{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><ref refid="struct_f_c_c_o_b__t" kindref="compound">FCCOB_t</ref><sp/>erase;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>erase.Flash_Command<sp/>=<sp/>FTFE_FCCOB0_CCOBn(0x09);<sp/></highlight><highlight class="comment">//Macro<sp/>for<sp/>accessing<sp/>commands<sp/>from<sp/>MK64F12.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>erase.Address.Flash_AllAddress<sp/>=<sp/>address;<sp/></highlight><highlight class="comment">//clears<sp/>the<sp/>24<sp/>bit<sp/>starting<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LaunchCommand(&amp;erase);</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group___flash__module_1ga06868787ccef73e69bd236d3b93b68f3" kindref="member">Flash_Erase</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="273"><highlight class="normal">{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EraseSector(FLASH_DATA_START);</highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/Jeong/git/04/Modules/Flash/Flash.c"/>
  </compounddef>
</doxygen>
