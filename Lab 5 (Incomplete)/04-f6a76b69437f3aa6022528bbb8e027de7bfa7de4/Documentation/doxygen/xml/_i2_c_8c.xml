<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="_i2_c_8c" kind="file" language="C++">
    <compoundname>I2C.c</compoundname>
    <includes local="yes">stdlib.h</includes>
    <includes refid="_i2_c_8h" local="yes">I2C.h</includes>
    <includes refid="critical_8h" local="yes">Critical\critical.h</includes>
    <includes local="yes">device\MK64F12.h</includes>
    <includes local="yes">drivers\fsl_port.h</includes>
    <includes local="yes">drivers\fsl_clock.h</includes>
    <includes local="yes">drivers\fsl_common.h</includes>
    <incdepgraph>
      <node id="6">
        <label>stdbool.h</label>
      </node>
      <node id="7">
        <label>Critical\critical.h</label>
        <link refid="critical_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>stdint.h</label>
      </node>
      <node id="2">
        <label>stdlib.h</label>
      </node>
      <node id="11">
        <label>drivers\fsl_common.h</label>
      </node>
      <node id="9">
        <label>drivers\fsl_port.h</label>
      </node>
      <node id="4">
        <label>Types\types.h</label>
        <link refid="types_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>drivers\fsl_clock.h</label>
      </node>
      <node id="8">
        <label>device\MK64F12.h</label>
      </node>
      <node id="1">
        <label>C:/Users/Jeong/git/04/Modules/I2C/I2C.c</label>
        <link refid="_i2_c_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>I2C.h</label>
        <link refid="_i2_c_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group___i2_c__module_1gaaf105ae5beaca1dee30ae54530691fce" prot="public" static="no" strong="no">
        <type></type>
        <name>@16</name>
        <enumvalue id="group___i2_c__module_1ggaaf105ae5beaca1dee30ae54530691fceaaade5e53e88cf231292cd1142cce2afe" prot="public">
          <name>STATE_IDLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___i2_c__module_1ggaaf105ae5beaca1dee30ae54530691fceaa157a2e8e174dd72f28ea3861b72b5e8" prot="public">
          <name>STATE_DEVADDRESS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___i2_c__module_1ggaaf105ae5beaca1dee30ae54530691fcea601fe6d2883039dd9cfeca12c65ea3c8" prot="public">
          <name>STATE_DEVADDRESS2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___i2_c__module_1ggaaf105ae5beaca1dee30ae54530691fcea1844f314039d713261df43a309145446" prot="public">
          <name>STATE_START</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___i2_c__module_1ggaaf105ae5beaca1dee30ae54530691fceaea29ca0c56b2f217665b0971c7301f27" prot="public">
          <name>STATE_RESTART</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___i2_c__module_1ggaaf105ae5beaca1dee30ae54530691fceab0172924b93528706fe07b6a9ccdf9ee" prot="public">
          <name>STATE_REGADDRESS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___i2_c__module_1ggaaf105ae5beaca1dee30ae54530691fcea3d3ea9fb2db0c6039f1065b6ee452fe9" prot="public">
          <name>STATE_DATA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___i2_c__module_1ggaaf105ae5beaca1dee30ae54530691fceaacbe6cbcad841c9cfd0cbf67bd0784d2" prot="public">
          <name>STATE_STOP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" line="28" column="1" bodyfile="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" bodystart="27" bodyend="37"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group___i2_c__module_1ga35758fe340325ce2544f2c0aeccfef4d" prot="public" static="no" mutable="no">
        <type><ref refid="struct_t_i2_c_module" kindref="compound">TI2CModule</ref></type>
        <definition>TI2CModule I2CModule</definition>
        <argsstring></argsstring>
        <name>I2CModule</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>I2C module structure variable </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" line="25" column="12" bodyfile="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___i2_c__module_1ga8663e9c5eb49bd58dcdc2189899579cc" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool IntRead</definition>
        <argsstring></argsstring>
        <name>IntRead</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Boolean variable for IntRead </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" line="39" column="13" bodyfile="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___i2_c__module_1gacdcc011521033f86399a379eaf35a1ce" prot="public" static="yes" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t NbBytes</definition>
        <argsstring></argsstring>
        <name>NbBytes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Total number of bytes for IntRead </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" line="40" column="16" bodyfile="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___i2_c__module_1ga6f183b555714685bf2dfdb2e269e8366" prot="public" static="yes" mutable="no">
        <type>uint8_t *</type>
        <definition>uint8_t* Data</definition>
        <argsstring></argsstring>
        <name>Data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to the data for IntRead </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" line="41" column="16" bodyfile="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___i2_c__module_1gae6422528df083efd8e8e1600404d407a" prot="public" static="no" mutable="no">
        <type>const port_pin_config_t</type>
        <definition>const port_pin_config_t I2C0_CONFIG</definition>
        <argsstring></argsstring>
        <name>I2C0_CONFIG</name>
        <initializer>=
{
    .pullSelect          = kPORT_PullDisable,
    .slewRate            = kPORT_SlowSlewRate,
    .passiveFilterEnable = kPORT_PassiveFilterDisable,
    .openDrainEnable     = kPORT_OpenDrainEnable,
    .driveStrength       = kPORT_LowDriveStrength,
    .mux                 = kPORT_MuxAlt5,
    .lockRegister        = kPORT_UnlockRegister
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" line="43" column="25" bodyfile="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___i2_c__module_1ga9d0e9da6860d17a91aa55eeeddebb5cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool I2C_Init</definition>
        <argsstring>(const uint32_t moduleClk, const TI2CModule *const aI2CModule)</argsstring>
        <name>I2C_Init</name>
        <param>
          <type>const uint32_t</type>
          <declname>moduleClk</declname>
        </param>
        <param>
          <type>const <ref refid="struct_t_i2_c_module" kindref="compound">TI2CModule</ref> *const</type>
          <declname>aI2CModule</declname>
        </param>
        <briefdescription>
<para>Sets up the I2C before first use. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>moduleClk</parametername>
</parameternamelist>
<parameterdescription>
<para>The module clock in Hz. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aI2CModule</parametername>
</parameternamelist>
<parameterdescription>
<para>is a structure containing the operating conditions for the module. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>BOOL - TRUE if the I2C module was successfully initialized. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" line="60" column="6" bodyfile="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" bodystart="60" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="group___i2_c__module_1ga0d6844ce590bbf5cc557fdf0747ad551" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_SelectSlaveDevice</definition>
        <argsstring>(const uint8_t slaveAddress)</argsstring>
        <name>I2C_SelectSlaveDevice</name>
        <param>
          <type>const uint8_t</type>
          <declname>slaveAddress</declname>
        </param>
        <briefdescription>
<para>Selects the current slave device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slaveAddress</parametername>
</parameternamelist>
<parameterdescription>
<para>The slave device address. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" line="126" column="6" bodyfile="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="group___i2_c__module_1ga6be376f4cbdfc0de812477c6168f2b39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_WaitAck</definition>
        <argsstring>(void)</argsstring>
        <name>I2C_WaitAck</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Waits for the acknowledgment from the slave device. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" line="134" column="6" bodyfile="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" bodystart="134" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="group___i2_c__module_1gaa5900a0050d030752f7e217492b33e7b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void I2C_WaitIdle</definition>
        <argsstring>(void)</argsstring>
        <name>I2C_WaitIdle</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Waits until the bus idle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" line="146" column="13" bodyfile="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" bodystart="146" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="group___i2_c__module_1gafb8f665f3d406c181fb1416d3d05d65f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void I2C_StartSignal</definition>
        <argsstring>(void)</argsstring>
        <name>I2C_StartSignal</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Send a start signal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" line="156" column="13" bodyfile="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" bodystart="156" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="group___i2_c__module_1gaf0e9cbcee4cab5d5752f5ded7a493a24" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void I2C_StopSignal</definition>
        <argsstring>(void)</argsstring>
        <name>I2C_StopSignal</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Send a stop signal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" line="166" column="13" bodyfile="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" bodystart="166" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="group___i2_c__module_1gae2136dd5673026fe692995d910b45af3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void I2C_ArbitrationLost</definition>
        <argsstring>(void)</argsstring>
        <name>I2C_ArbitrationLost</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check and clear the arbitration flag. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" line="176" column="13" bodyfile="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" bodystart="176" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="group___i2_c__module_1gacaac94d86a7213791fb691d57c6f278b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_Write</definition>
        <argsstring>(const uint8_t registerAddress, const uint8_t data)</argsstring>
        <name>I2C_Write</name>
        <param>
          <type>const uint8_t</type>
          <declname>registerAddress</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Write a byte of data to a specified register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>registerAddress</parametername>
</parameternamelist>
<parameterdescription>
<para>The register address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The 8-bit data to write. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" line="183" column="6" bodyfile="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" bodystart="183" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="group___i2_c__module_1ga3692682bb1cb84e1a3d0c31195451bd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_PollRead</definition>
        <argsstring>(const uint8_t registerAddress, uint8_t *const data, const uint8_t nbBytes)</argsstring>
        <name>I2C_PollRead</name>
        <param>
          <type>const uint8_t</type>
          <declname>registerAddress</declname>
        </param>
        <param>
          <type>uint8_t *const</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>nbBytes</declname>
        </param>
        <briefdescription>
<para>Reads data of a specified length starting from a specified register. </para>
        </briefdescription>
        <detaileddescription>
<para>Uses polling as the method of data reception. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>registerAddress</parametername>
</parameternamelist>
<parameterdescription>
<para>The register address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to store the bytes that are read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to read. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" line="209" column="6" bodyfile="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" bodystart="209" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="group___i2_c__module_1ga3685b2f03da2fa00b0cb671a0cce4f3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_IntRead</definition>
        <argsstring>(const uint8_t registerAddress, uint8_t *const data, const uint8_t nbBytes)</argsstring>
        <name>I2C_IntRead</name>
        <param>
          <type>const uint8_t</type>
          <declname>registerAddress</declname>
        </param>
        <param>
          <type>uint8_t *const</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>nbBytes</declname>
        </param>
        <briefdescription>
<para>Reads data of a specified length starting from a specified register. </para>
        </briefdescription>
        <detaileddescription>
<para>Uses interrupts as the method of data reception. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>registerAddress</parametername>
</parameternamelist>
<parameterdescription>
<para>The register address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to store the bytes that are read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to read. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" line="257" column="6" bodyfile="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" bodystart="257" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="group___i2_c__module_1ga8e817e99d2a59e5f48e4ff0c79e7eef5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C0_IRQHandler</definition>
        <argsstring>(void)</argsstring>
        <name>I2C0_IRQHandler</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>I2C interrupt request handler. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" line="311" column="6" bodyfile="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" bodystart="311" bodyend="362"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>I/O routines for the K70 I2C interface. </para>
    </briefdescription>
    <detaileddescription>
<para>This contains the functions for operating the I2C (inter-integrated circuit) module.</para>
<para><simplesect kind="author"><para>Jeong Bin Lee </para>
</simplesect>
<simplesect kind="date"><para>2020-05-13 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="17"><highlight class="preprocessor">#include<sp/>&quot;stdlib.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_i2_c_8h" kindref="compound">I2C.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="critical_8h" kindref="compound">Critical\critical.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;device\MK64F12.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;drivers\fsl_port.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;drivers\fsl_clock.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;drivers\fsl_common.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><ref refid="struct_t_i2_c_module" kindref="compound">TI2CModule</ref><sp/><ref refid="group___i2_c__module_1ga35758fe340325ce2544f2c0aeccfef4d" kindref="member">I2CModule</ref>;<sp/></highlight></codeline>
<codeline lineno="27"><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>STATE_IDLE,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>STATE_DEVADDRESS,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>STATE_DEVADDRESS2,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>STATE_START,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>STATE_RESTART,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>STATE_REGADDRESS,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>STATE_DATA,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>STATE_STOP</highlight></codeline>
<codeline lineno="37"><highlight class="normal">};</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IntRead<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="40"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>NbBytes;<sp/></highlight></codeline>
<codeline lineno="41"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>*Data;<sp/></highlight></codeline>
<codeline lineno="43"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>port_pin_config_t<sp/>I2C0_CONFIG<sp/>=</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>.pullSelect<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>kPORT_PullDisable,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>.slewRate<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>kPORT_SlowSlewRate,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>.passiveFilterEnable<sp/>=<sp/>kPORT_PassiveFilterDisable,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>.openDrainEnable<sp/><sp/><sp/><sp/><sp/>=<sp/>kPORT_OpenDrainEnable,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>.driveStrength<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>kPORT_LowDriveStrength,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>.mux<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>kPORT_MuxAlt5,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>.lockRegister<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>kPORT_UnlockRegister</highlight></codeline>
<codeline lineno="52"><highlight class="normal">};</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group___i2_c__module_1ga9d0e9da6860d17a91aa55eeeddebb5cd" kindref="member">I2C_Init</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>moduleClk,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_t_i2_c_module" kindref="compound">TI2CModule</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>aI2CModule)</highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//see<sp/>page<sp/>1563<sp/>for<sp/>slave<sp/>and<sp/>master<sp/>init</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(moduleClk<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>uint32_t<sp/>calcBR,<sp/>tmpBR1;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>TARGETBR<sp/>=<sp/>100000;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>uint8_t<sp/>i,<sp/>j,<sp/>mult,<sp/>icr;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>MULT[]<sp/>=<sp/>{1,<sp/>2,<sp/>4};</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>DIVIDER[]<sp/>=<sp/>{<sp/>20,<sp/>22,<sp/>24,<sp/>26,<sp/>28,<sp/>30,<sp/>34,<sp/>40,<sp/>28,<sp/>32,<sp/>36,<sp/>40,<sp/>44,<sp/>48,<sp/>56,<sp/>68,<sp/>48,<sp/>56,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>64,<sp/>72,<sp/>80,<sp/>88,<sp/>104,128,<sp/>80,<sp/><sp/>96,<sp/><sp/>112,<sp/>128,<sp/>144,<sp/>160,<sp/>192,<sp/>240,<sp/>160,<sp/>192,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>224,<sp/>256,<sp/>288,<sp/>320,<sp/>384,<sp/>480,<sp/>320,<sp/>384,<sp/>448,<sp/>512,<sp/>576,<sp/>640,<sp/>768,<sp/>960,<sp/>640,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>768,<sp/><sp/>896,<sp/><sp/>1024,<sp/>1152,<sp/>1280,<sp/>1536,<sp/>1920,<sp/>1280,<sp/>1536,<sp/>1792,<sp/>2048,<sp/>2304,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2560,<sp/>3072,<sp/>3840<sp/>};</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><ref refid="group___i2_c__module_1ga35758fe340325ce2544f2c0aeccfef4d" kindref="member">I2CModule</ref>.<ref refid="struct_t_i2_c_module_1aa6056c02fd35c8a10351230551e8f7ea" kindref="member">readCompleteCallbackFunction</ref><sp/>=<sp/>aI2CModule-&gt;<ref refid="struct_t_i2_c_module_1aa6056c02fd35c8a10351230551e8f7ea" kindref="member">readCompleteCallbackFunction</ref>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><ref refid="group___i2_c__module_1ga35758fe340325ce2544f2c0aeccfef4d" kindref="member">I2CModule</ref>.<ref refid="struct_t_i2_c_module_1a27d054d3b463998978dbb6237e6ce105" kindref="member">readCompleteCallbackArguments</ref><sp/>=<sp/>aI2CModule-&gt;<ref refid="struct_t_i2_c_module_1a27d054d3b463998978dbb6237e6ce105" kindref="member">readCompleteCallbackArguments</ref>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//enable<sp/>clock<sp/>gating<sp/>for<sp/>I2C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>CLOCK_EnableClock(kCLOCK_I2c0);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//initialise<sp/>the<sp/>portE<sp/>24<sp/>and<sp/>25<sp/>to<sp/>be<sp/>I2C0_SCL<sp/>and<sp/>I2C_SDA<sp/>(ALT5)<sp/>for<sp/>accelerometer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//see<sp/>page<sp/>5<sp/>on<sp/>schematics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>PORT_SetPinConfig(PORTE,<sp/>24,<sp/>&amp;I2C0_CONFIG);<sp/></highlight><highlight class="comment">//I2C0_SCL<sp/>(open<sp/>drain<sp/>enabled)(pull<sp/>up<sp/>resistor<sp/>enabled)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>PORT_SetPinConfig(PORTE,<sp/>25,<sp/>&amp;I2C0_CONFIG);<sp/></highlight><highlight class="comment">//I2C0_SDA<sp/>(open<sp/>drain<sp/>enabled)(pull<sp/>up<sp/>resistor<sp/>enabled)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//set<sp/>up<sp/>baud<sp/>rate<sp/>close<sp/>to<sp/>100kbps,<sp/>see<sp/>51.3.2<sp/>in<sp/>manual</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//do<sp/>an<sp/>exhaustive<sp/>search<sp/>to<sp/>find<sp/>achievable<sp/>baud<sp/>rate<sp/>closest<sp/>to<sp/>100kbps<sp/>(use<sp/>2<sp/>for<sp/>loops)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//also<sp/>see<sp/>table<sp/>51-2<sp/>in<sp/>manual</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//I2C<sp/>baud<sp/>rate<sp/>=<sp/>I2C<sp/>module<sp/>clock<sp/>speed<sp/>(Hz)/(mult<sp/>×<sp/>SCL<sp/>divider)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//where<sp/>mult<sp/><sp/>=<sp/>1,<sp/>2<sp/>or<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(MULT);<sp/>i++)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;<sp/>j<sp/>&lt;<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(DIVIDER)/</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(DIVIDER[0]));<sp/>j++)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>calcBR<sp/>=<sp/>(moduleClk<sp/>/<sp/>(MULT[i]<sp/>*<sp/>DIVIDER[j]));</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(abs(TARGETBR<sp/>-<sp/>calcBR)<sp/>&lt;<sp/>abs(TARGETBR<sp/>-<sp/>tmpBR1))</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpBR1<sp/>=<sp/>(moduleClk/(MULT[i]<sp/>*<sp/>DIVIDER[j]));</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mult<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>icr<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//set<sp/>I2C<sp/>baudrate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>I2C0-&gt;F<sp/>=<sp/>I2C_F_MULT(mult)<sp/>|<sp/>I2C_F_ICR(icr);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//enable<sp/>I2C<sp/>module<sp/>channel<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>I2C0-&gt;C1<sp/>|=<sp/>I2C_C1_IICEN_MASK;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//I2C0-&gt;FLT<sp/>=<sp/>0;<sp/>//not<sp/>using<sp/>glitch<sp/>filters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//set<sp/>nested<sp/>vectored<sp/>interrupt<sp/>control<sp/>for<sp/>I2C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>__NVIC_ClearPendingIRQ(I2C0_IRQn);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>__NVIC_EnableIRQ(I2C0_IRQn);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___i2_c__module_1ga0d6844ce590bbf5cc557fdf0747ad551" kindref="member">I2C_SelectSlaveDevice</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>slaveAddress)</highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><ref refid="group___i2_c__module_1ga35758fe340325ce2544f2c0aeccfef4d" kindref="member">I2CModule</ref>.primarySlaveAddress<sp/>=<sp/>slaveAddress;</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___i2_c__module_1ga6be376f4cbdfc0de812477c6168f2b39" kindref="member">I2C_WaitAck</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="135"><highlight class="normal">{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>timeOut<sp/>=<sp/>100000;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((I2C0-&gt;S<sp/>&amp;<sp/>I2C_S_IICIF_MASK)<sp/>==<sp/>0<sp/>||<sp/>timeOut<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>timeOut--;</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>I2C_WaitIdle(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="147"><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>till<sp/>bus<sp/>is<sp/>idle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(I2C0-&gt;S<sp/>&amp;<sp/>I2C_S_BUSY_MASK);</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>I2C_StartSignal(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//when<sp/>MST<sp/>is<sp/>changed<sp/>from<sp/>0<sp/>to<sp/>1<sp/>START<sp/>signal<sp/>is<sp/>generated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>I2C0-&gt;C1<sp/>|=<sp/>I2C_C1_MST_MASK<sp/>|<sp/>I2C_C1_TX_MASK;</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>I2C_StopSignal(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="167"><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//when<sp/>MST<sp/>is<sp/>changed<sp/>from<sp/>1<sp/>to<sp/>0<sp/>STOP<sp/>signal<sp/>is<sp/>generated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>I2C0-&gt;C1<sp/>&amp;=<sp/>~(I2C_C1_MST_MASK<sp/>|<sp/>I2C_C1_TX_MASK);</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>I2C_ArbitrationLost(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="177"><highlight class="normal">{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(I2C0-&gt;S<sp/>&amp;<sp/>I2C_S_ARBL_MASK)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>I2C0-&gt;S<sp/>=<sp/>I2C_S_ARBL_MASK;</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___i2_c__module_1gacaac94d86a7213791fb691d57c6f278b" kindref="member">I2C_Write</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>registerAddress,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>data)</highlight></codeline>
<codeline lineno="184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//uint8_t<sp/>writeState<sp/>=<sp/>STATE_IDLE;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>EnterCritical();</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>I2C_ArbitrationLost();</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//wait<sp/>until<sp/>idle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>I2C_WaitIdle();</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//send<sp/>start<sp/>signal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>I2C_StartSignal();</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//send<sp/>slave<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>I2C0-&gt;D<sp/>=<sp/>(<ref refid="group___i2_c__module_1ga35758fe340325ce2544f2c0aeccfef4d" kindref="member">I2CModule</ref>.primarySlaveAddress<sp/>&lt;&lt;<sp/>1);<sp/></highlight><highlight class="comment">//with<sp/>a<sp/>write<sp/>bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><ref refid="group___i2_c__module_1ga6be376f4cbdfc0de812477c6168f2b39" kindref="member">I2C_WaitAck</ref>();</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//send<sp/>register<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>I2C0-&gt;D<sp/>=<sp/>registerAddress;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><ref refid="group___i2_c__module_1ga6be376f4cbdfc0de812477c6168f2b39" kindref="member">I2C_WaitAck</ref>();</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//read<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>I2C0-&gt;D<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><ref refid="group___i2_c__module_1ga6be376f4cbdfc0de812477c6168f2b39" kindref="member">I2C_WaitAck</ref>();</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//send<sp/>stop<sp/>signal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>I2C_StopSignal();</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>ExitCritical();</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___i2_c__module_1ga3692682bb1cb84e1a3d0c31195451bd9" kindref="member">I2C_PollRead</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>registerAddress,<sp/>uint8_t*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>data,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>nbBytes)</highlight></codeline>
<codeline lineno="210"><highlight class="normal">{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>EnterCritical();</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//use<sp/>polling<sp/>method<sp/>to<sp/>read<sp/>data<sp/>from<sp/>register</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>uint8_t<sp/>i;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//uint8_t<sp/>readState<sp/>=<sp/>STATE_IDLE;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>The<sp/>I2C_S_BUSY_MASK<sp/>is<sp/>used<sp/>to<sp/>determine<sp/>whether<sp/>the<sp/>I2C<sp/>bus<sp/>is<sp/>idle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>You<sp/>should<sp/>check<sp/>this<sp/>before<sp/>you<sp/>initiate<sp/>a<sp/>communication.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>I2C_ArbitrationLost();</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//wait<sp/>until<sp/>it<sp/>is<sp/>idle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>I2C_WaitIdle();</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//send<sp/>start<sp/>signal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>I2C_StartSignal();</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//write<sp/>slave<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>I2C0-&gt;D<sp/>=<sp/>(<ref refid="group___i2_c__module_1ga35758fe340325ce2544f2c0aeccfef4d" kindref="member">I2CModule</ref>.primarySlaveAddress<sp/>&lt;&lt;<sp/>1);<sp/></highlight><highlight class="comment">//with<sp/>a<sp/>write<sp/>bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><ref refid="group___i2_c__module_1ga6be376f4cbdfc0de812477c6168f2b39" kindref="member">I2C_WaitAck</ref>();</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//send<sp/>register<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>I2C0-&gt;D<sp/>=<sp/>registerAddress;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><ref refid="group___i2_c__module_1ga6be376f4cbdfc0de812477c6168f2b39" kindref="member">I2C_WaitAck</ref>();</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//re-send<sp/>start<sp/>signal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>I2C0-&gt;C1<sp/>|=<sp/>I2C_C1_RSTA_MASK;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//write<sp/>slave<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>I2C0-&gt;D<sp/>=<sp/>(<ref refid="group___i2_c__module_1ga35758fe340325ce2544f2c0aeccfef4d" kindref="member">I2CModule</ref>.primarySlaveAddress<sp/>&lt;&lt;<sp/>1)<sp/>|<sp/>0b1;<sp/></highlight><highlight class="comment">//with<sp/>read<sp/>bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><ref refid="group___i2_c__module_1ga6be376f4cbdfc0de812477c6168f2b39" kindref="member">I2C_WaitAck</ref>();</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//enable<sp/>read,<sp/>NAK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>I2C0-&gt;C1<sp/>&amp;=<sp/>~(I2C_C1_TX_MASK<sp/>|<sp/>I2C_C1_TXAK_MASK);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//dummy<sp/>read<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>data[0]<sp/>=<sp/>I2C0-&gt;D;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><ref refid="group___i2_c__module_1ga6be376f4cbdfc0de812477c6168f2b39" kindref="member">I2C_WaitAck</ref>();</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;<sp/>nbBytes<sp/>-<sp/>1;<sp/>i++)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//read<sp/>data<sp/>and<sp/>wait<sp/>for<sp/>ack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>data[i]<sp/>=<sp/>I2C0-&gt;D;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___i2_c__module_1ga6be376f4cbdfc0de812477c6168f2b39" kindref="member">I2C_WaitAck</ref>();</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>I2C0-&gt;C1<sp/>|=<sp/>I2C_C1_TXAK_MASK;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>data[i++]<sp/>=<sp/>I2C0-&gt;D;<sp/></highlight><highlight class="comment">//read<sp/>2nd<sp/>last<sp/>byte</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><ref refid="group___i2_c__module_1ga6be376f4cbdfc0de812477c6168f2b39" kindref="member">I2C_WaitAck</ref>();</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//send<sp/>stop<sp/>signal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>I2C_StopSignal();</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>data[i++]<sp/>=<sp/>I2C0-&gt;D;<sp/></highlight><highlight class="comment">//read<sp/>last<sp/>byte</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>ExitCritical();</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___i2_c__module_1ga3685b2f03da2fa00b0cb671a0cce4f3f" kindref="member">I2C_IntRead</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>registerAddress,<sp/>uint8_t*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>data,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>nbBytes)</highlight></codeline>
<codeline lineno="258"><highlight class="normal">{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>EnterCritical();</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if<sp/>(I2C0-&gt;C1<sp/>&amp;<sp/>I2C_C1_IICIE_MASK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>ExitCritical();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>return;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//enable<sp/>interrupts<sp/>for<sp/>I2C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>I2C0-&gt;C1<sp/>|=<sp/>I2C_C1_IICIE_MASK;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//initialise<sp/>interrupt<sp/>read<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(IntRead)</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>NbBytes<sp/>=<sp/>nbBytes;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>Data<sp/>=<sp/>data;</highlight><highlight class="comment">//point<sp/>at<sp/>the<sp/>same<sp/>address<sp/>as<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>IntRead<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>The<sp/>I2C_S_BUSY_MASK<sp/>is<sp/>used<sp/>to<sp/>determine<sp/>whether<sp/>the<sp/>I2C<sp/>bus<sp/>is<sp/>idle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>You<sp/>should<sp/>check<sp/>this<sp/>before<sp/>you<sp/>initiate<sp/>a<sp/>communication.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>I2C_WaitIdle();<sp/></highlight><highlight class="comment">//wait<sp/>until<sp/>I2C<sp/>is<sp/>idle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//send<sp/>start<sp/>signal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>I2C_StartSignal();</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//write<sp/>device<sp/>address<sp/>+<sp/>write/read<sp/>=<sp/>0/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>I2C0-&gt;D<sp/>=<sp/>(<ref refid="group___i2_c__module_1ga35758fe340325ce2544f2c0aeccfef4d" kindref="member">I2CModule</ref>.primarySlaveAddress<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//wait<sp/>for<sp/>ack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><ref refid="group___i2_c__module_1ga6be376f4cbdfc0de812477c6168f2b39" kindref="member">I2C_WaitAck</ref>();</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//write<sp/>register<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>I2C0-&gt;D<sp/>=<sp/>registerAddress;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//wait<sp/>for<sp/>ack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><ref refid="group___i2_c__module_1ga6be376f4cbdfc0de812477c6168f2b39" kindref="member">I2C_WaitAck</ref>();</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//repeat<sp/>start<sp/>condition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>I2C0-&gt;C1<sp/>|=<sp/>I2C_C1_RSTA_MASK;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//write<sp/>device<sp/>address<sp/>+<sp/>write/read<sp/>=<sp/>0/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>I2C0-&gt;D<sp/>=<sp/>(<ref refid="group___i2_c__module_1ga35758fe340325ce2544f2c0aeccfef4d" kindref="member">I2CModule</ref>.primarySlaveAddress<sp/>&lt;&lt;<sp/>1)<sp/>|<sp/>0b00000001;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//wait<sp/>for<sp/>ack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><ref refid="group___i2_c__module_1ga6be376f4cbdfc0de812477c6168f2b39" kindref="member">I2C_WaitAck</ref>();</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//change<sp/>to<sp/>receive<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>I2C0-&gt;C1<sp/>&amp;=<sp/>~(I2C_C1_TX_MASK<sp/>|<sp/>I2C_C1_TXAK_MASK);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//send<sp/>stop<sp/>signal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>I2C_StopSignal();</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>Data[0]<sp/>=<sp/>I2C0-&gt;D;<sp/></highlight><highlight class="comment">//read<sp/>from<sp/>the<sp/>register<sp/>to<sp/>initiate<sp/>read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//wait<sp/>for<sp/>ack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><ref refid="group___i2_c__module_1ga6be376f4cbdfc0de812477c6168f2b39" kindref="member">I2C_WaitAck</ref>();</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>ExitCritical();</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___i2_c__module_1ga8e817e99d2a59e5f48e4ff0c79e7eef5" kindref="member">I2C0_IRQHandler</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="312"><highlight class="normal">{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>nbBytes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//A<sp/>flowchart<sp/>for<sp/>a<sp/>typical<sp/>I2C<sp/>interrupt<sp/>service<sp/>routine<sp/>can<sp/>be<sp/>found<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//K70<sp/>Reference<sp/>Manual<sp/>as<sp/>Figure<sp/>51-6.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//see<sp/>page<sp/>1565<sp/>of<sp/>K64<sp/>manual<sp/>for<sp/>the<sp/>flow<sp/>chart</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//clear<sp/>interrupt<sp/>(w1c)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>I2C0-&gt;S<sp/>=<sp/>I2C_S_IICIF_MASK;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Check<sp/>TCF<sp/>mask<sp/>p.1559</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(I2C0-&gt;S<sp/>&amp;<sp/>I2C_S_TCF_MASK)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!(I2C0-&gt;C1<sp/>&amp;<sp/>I2C_C1_TX_MASK))</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(NbBytes)</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//second<sp/>last<sp/>byte<sp/>to<sp/>read<sp/>see<sp/>page<sp/>1565</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//set<sp/>TXAK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2C0-&gt;C1<sp/>|=<sp/>I2C_C1_TXAK_MASK;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data[nbBytes]<sp/>=<sp/>I2C0-&gt;D;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbBytes++;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NbBytes--;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//last<sp/>byte<sp/>to<sp/>read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2C_StopSignal();</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data[nbBytes]<sp/>=<sp/>I2C0-&gt;D;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbBytes++;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NbBytes--;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//finished<sp/>reading<sp/>to<sp/>the<sp/>last<sp/>byte</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//reinitialise<sp/>the<sp/>static<sp/>and<sp/>global<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbBytes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IntRead<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//disable<sp/>interrupt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2C0-&gt;C1<sp/>&amp;=<sp/>~I2C_C1_IICIE_MASK;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//run<sp/>the<sp/>user<sp/>callback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group___i2_c__module_1ga35758fe340325ce2544f2c0aeccfef4d" kindref="member">I2CModule</ref>.<ref refid="struct_t_i2_c_module_1aa6056c02fd35c8a10351230551e8f7ea" kindref="member">readCompleteCallbackFunction</ref>)</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___i2_c__module_1ga35758fe340325ce2544f2c0aeccfef4d" kindref="member">I2CModule</ref>.<ref refid="struct_t_i2_c_module_1aa6056c02fd35c8a10351230551e8f7ea" kindref="member">readCompleteCallbackFunction</ref>(<ref refid="group___i2_c__module_1ga35758fe340325ce2544f2c0aeccfef4d" kindref="member">I2CModule</ref>.<ref refid="struct_t_i2_c_module_1a27d054d3b463998978dbb6237e6ce105" kindref="member">readCompleteCallbackArguments</ref>);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>NbBytes<sp/>&gt;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data[nbBytes]<sp/>=<sp/>I2C0-&gt;D;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbBytes++;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NbBytes--;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/Jeong/git/04/Modules/I2C/I2C.c"/>
  </compounddef>
</doxygen>
