<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="group___flash__module" kind="group">
    <compoundname>Flash_module</compoundname>
    <title>Flash module documentation</title>
    <innerclass refid="struct_f_c_c_o_b__t" prot="public">FCCOB_t</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group___flash__module_1gac0181349b31f7dbeef69e296c7a97a2b" prot="public" static="no" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t FLASH_ERASE_SECTOR</definition>
        <argsstring></argsstring>
        <name>FLASH_ERASE_SECTOR</name>
        <initializer>= 0x09</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flash command erase sector </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" line="23" column="15" bodyfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___flash__module_1ga5ab5f1fd69f920ee5bf0b56493046332" prot="public" static="no" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t FLASH_WRITE_PHRASE</definition>
        <argsstring></argsstring>
        <name>FLASH_WRITE_PHRASE</name>
        <initializer>= 0x07</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flash command write phrase </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" line="24" column="15" bodyfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___flash__module_1ga24ca5c7e2928095bf07ab6f6a98679c6" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool ByteFlash[8]</definition>
        <argsstring>[8]</argsstring>
        <name>ByteFlash</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>virtual memory for flash </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" line="27" column="13" bodyfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___flash__module_1ga5f0979e9c65831382ec3a18d971ac8eb" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int AddressFlash[8]</definition>
        <argsstring>[8]</argsstring>
        <name>AddressFlash</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>flash address sector </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" line="29" column="12" bodyfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" bodystart="29" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___flash__module_1gaa5782279b5e558cafc2f135c0a1177d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Flash_Init</definition>
        <argsstring>(void)</argsstring>
        <name>Flash_Init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Enables the Flash module. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool - TRUE if the Flash was setup successfully. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" line="32" column="6" bodyfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" bodystart="32" bodyend="43" declfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.h" declline="64" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___flash__module_1ga50871aff0f5af1e092aea3ed2545cf72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Flash_AllocateVar</definition>
        <argsstring>(volatile void **variable, const uint8_t size)</argsstring>
        <name>Flash_AllocateVar</name>
        <param>
          <type>volatile void **</type>
          <declname>variable</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocates space for a non-volatile variable in the Flash memory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>variable</parametername>
</parameternamelist>
<parameterdescription>
<para>is the address of a pointer to a variable that is to be allocated space in Flash memory. The pointer will be allocated to a relevant address: If the variable is a byte, then any address. If the variable is a half-word, then an even address. If the variable is a word, then an address divisible by 4. This allows the resulting variable to be used with the relevant Flash_Write function which assumes a certain memory address. e.g. a 16-bit variable will be on an even address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size, in bytes, of the variable that is to be allocated space in the Flash memory. Valid values are 1, 2 and 4. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool - TRUE if the variable was allocated space in the Flash memory. </para>
</simplesect>
<simplesect kind="note"><para>Assumes Flash has been initialized. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" line="46" column="6" bodyfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" bodystart="46" bodyend="110" declfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.h" declline="79" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___flash__module_1ga82437eff368716c682ca7a082bba1357" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool LaunchCommand</definition>
        <argsstring>(FCCOB_t *commonCommandObject)</argsstring>
        <name>LaunchCommand</name>
        <param>
          <type><ref refid="struct_f_c_c_o_b__t" kindref="compound">FCCOB_t</ref> *</type>
          <declname>commonCommandObject</declname>
        </param>
        <briefdescription>
<para>Checks the status of Flash register and launches the command given. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>commonCommandObject</parametername>
</parameternamelist>
<parameterdescription>
<para>a structure variable to store data to be written into flash.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool - TRUE if flash command was written properly </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" line="118" column="13" bodyfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" bodystart="118" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="group___flash__module_1ga0fc992308ad53593bdc6f6e015c2924c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool WritePhrase</definition>
        <argsstring>(const uint32_t address, const uint64union_t phrase)</argsstring>
        <name>WritePhrase</name>
        <param>
          <type>const uint32_t</type>
          <declname>address</declname>
        </param>
        <param>
          <type>const <ref refid="unionuint64union__t" kindref="compound">uint64union_t</ref></type>
          <declname>phrase</declname>
        </param>
        <briefdescription>
<para>Writes a phrase into the <ref refid="struct_f_c_c_o_b__t" kindref="compound">FCCOB_t</ref> structure and launch write command to flash. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>32 bit integer of address to be written to flash </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phrase</parametername>
</parameternamelist>
<parameterdescription>
<para>64 bit of data to be written to flash. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool - TRUE if the packet was handled successfully. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" line="169" column="13" bodyfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" bodystart="169" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="group___flash__module_1gac37c5dc906e2c2635d9d8ccda0e4af8d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool ModifyPhrase</definition>
        <argsstring>(const uint32_t address, const uint64union_t phrase)</argsstring>
        <name>ModifyPhrase</name>
        <param>
          <type>const uint32_t</type>
          <declname>address</declname>
        </param>
        <param>
          <type>const <ref refid="unionuint64union__t" kindref="compound">uint64union_t</ref></type>
          <declname>phrase</declname>
        </param>
        <briefdescription>
<para>Modifies the current phrase. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>32 bit integer of address to be written to flash </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phrase</parametername>
</parameternamelist>
<parameterdescription>
<para>64 bit of data to be written to flash. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool - TRUE if the phrase was written properly. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" line="188" column="13" bodyfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" bodystart="188" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="group___flash__module_1ga5da7dcc0c6ef765546c79bbe25b48479" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Flash_Write32</definition>
        <argsstring>(volatile uint32_t *const address, const uint32_t data)</argsstring>
        <name>Flash_Write32</name>
        <param>
          <type>volatile uint32_t *const</type>
          <declname>address</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Writes a 32-bit number to Flash. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The 32-bit data to write. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool - TRUE if Flash was written successfully, FALSE if address is not aligned to a 4-byte boundary or if there is a programming error. </para>
</simplesect>
<simplesect kind="note"><para>Assumes Flash has been initialized. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; Carries high and low phrase components</para>
<para>&lt; Start address</para>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" line="195" column="6" bodyfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" bodystart="195" bodyend="212" declfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.h" declline="88" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___flash__module_1ga1458f5e4ac15e1848ae0bde32fe5b5f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Flash_Write16</definition>
        <argsstring>(volatile uint16_t *const address, const uint16_t data)</argsstring>
        <name>Flash_Write16</name>
        <param>
          <type>volatile uint16_t *const</type>
          <declname>address</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Writes a 16-bit number to Flash. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The 16-bit data to write. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool - TRUE if Flash was written successfully, FALSE if address is not aligned to a 2-byte boundary or if there is a programming error. </para>
</simplesect>
<simplesect kind="note"><para>Assumes Flash has been initialized. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; Carries high and low word components</para>
<para>&lt; Start address</para>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" line="215" column="6" bodyfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" bodystart="215" bodyend="232" declfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.h" declline="97" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___flash__module_1ga1e6f34b272d8ed7b0f897b43e65f2cc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Flash_Write8</definition>
        <argsstring>(volatile uint8_t *const address, const uint8_t data)</argsstring>
        <name>Flash_Write8</name>
        <param>
          <type>volatile uint8_t *const</type>
          <declname>address</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Writes an 8-bit number to Flash. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The 8-bit data to write. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool - TRUE if Flash was written successfully, FALSE if there is a programming error. </para>
</simplesect>
<simplesect kind="note"><para>Assumes Flash has been initialized. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; Carries high and low half-word components</para>
<para>&lt; Start address</para>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" line="235" column="6" bodyfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" bodystart="235" bodyend="253" declfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.h" declline="106" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___flash__module_1ga04fd4b98ef4ea1b033801d9c0d574849" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool EraseSector</definition>
        <argsstring>(const uint32_t address)</argsstring>
        <name>EraseSector</name>
        <param>
          <type>const uint32_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Erases the entire Flash sector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool - TRUE if the Flash &quot;data&quot; sector was erased successfully. </para>
</simplesect>
<simplesect kind="note"><para>Assumes Flash has been initialized. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" line="262" column="13" bodyfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" bodystart="262" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="group___flash__module_1ga06868787ccef73e69bd236d3b93b68f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Flash_Erase</definition>
        <argsstring>(void)</argsstring>
        <name>Flash_Erase</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Erases the entire Flash sector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool - TRUE if the Flash &quot;data&quot; sector was erased successfully. </para>
</simplesect>
<simplesect kind="note"><para>Assumes Flash has been initialized. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" line="272" column="6" bodyfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.c" bodystart="272" bodyend="275" declfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.h" declline="113" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___flash__module_1gac450fb89f016956f685a1e541644b2a8" prot="public" static="no">
        <name>_FB</name>
        <param><defname>flashAddress</defname></param>
        <initializer>*(uint8_t  volatile *)(flashAddress)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/Flash/Flash.h" line="23" column="9" bodyfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___flash__module_1ga28550847e9609b9b396a4230f36884e9" prot="public" static="no">
        <name>_FH</name>
        <param><defname>flashAddress</defname></param>
        <initializer>*(uint16_t volatile *)(flashAddress)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/Flash/Flash.h" line="24" column="9" bodyfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___flash__module_1gad4fb772b3db9c8eecdbf9df472351a28" prot="public" static="no">
        <name>_FW</name>
        <param><defname>flashAddress</defname></param>
        <initializer>*(uint32_t volatile *)(flashAddress)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/Flash/Flash.h" line="25" column="9" bodyfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___flash__module_1ga4c1198da68f5da4f6ffd5abc1d1c052a" prot="public" static="no">
        <name>_FP</name>
        <param><defname>flashAddress</defname></param>
        <initializer>*(uint64_t volatile *)(flashAddress)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/Flash/Flash.h" line="26" column="9" bodyfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___flash__module_1ga5c70db9dac9dbc146f98a1e27c731dec" prot="public" static="no">
        <name>FLASH_DATA_START</name>
        <initializer>0x00080000LU</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/Flash/Flash.h" line="29" column="9" bodyfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___flash__module_1ga4d7e8c8d5e35c4743dbdcbe09e9d0797" prot="public" static="no">
        <name>FLASH_DATA_END</name>
        <initializer>0x00080007LU</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/Flash/Flash.h" line="31" column="9" bodyfile="C:/Users/Jeong/git/04/Modules/Flash/Flash.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
