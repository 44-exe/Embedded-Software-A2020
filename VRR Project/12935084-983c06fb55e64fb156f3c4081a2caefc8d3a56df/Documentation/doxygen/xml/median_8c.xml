<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="median_8c" kind="file" language="C++">
    <compoundname>median.c</compoundname>
    <includes refid="types_8h" local="yes">Types\types.h</includes>
    <includes refid="median_8h" local="yes">Median\median.h</includes>
    <incdepgraph>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="1">
        <label>C:/Users/Jeong/git/04/Modules/Median/median.c</label>
        <link refid="median_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>Median\median.h</label>
        <link refid="median_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Types\types.h</label>
        <link refid="types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="median_8c_1ae9c8190fd02fa896acd9dd269b6cb817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t Median_Filter3</definition>
        <argsstring>(const uint8_t n1, const uint8_t n2, const uint8_t n3)</argsstring>
        <name>Median_Filter3</name>
        <param>
          <type>const uint8_t</type>
          <declname>n1</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>n2</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>n3</declname>
        </param>
        <briefdescription>
<para>Median filters 3 bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n1</parametername>
</parameternamelist>
<parameterdescription>
<para>is the first of 3 bytes for which the median is sought. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n2</parametername>
</parameternamelist>
<parameterdescription>
<para>is the second of 3 bytes for which the median is sought. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n3</parametername>
</parameternamelist>
<parameterdescription>
<para>is the third of 3 bytes for which the median is sought. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/Median/median.c" line="16" column="9" bodyfile="C:/Users/Jeong/git/04/Modules/Median/median.c" bodystart="16" bodyend="26"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Median filter. </para>
    </briefdescription>
    <detaileddescription>
<para>This contains the functions for performing a median filter on byte-sized data.</para>
<para><simplesect kind="author"><para>Jeong Bin Lee </para>
</simplesect>
<simplesect kind="date"><para>2020-05-13 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="11"><highlight class="comment">//<sp/>New<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="types_8h" kindref="compound">Types\types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="median_8h" kindref="compound">Median\median.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal">uint8_t<sp/><ref refid="median_8c_1ae9c8190fd02fa896acd9dd269b6cb817" kindref="member">Median_Filter3</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>n1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>n2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>n3)</highlight></codeline>
<codeline lineno="17"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//check<sp/>if<sp/>n1<sp/>is<sp/>the<sp/>middle<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((n2<sp/>&lt;=<sp/>n1)<sp/>&amp;&amp;<sp/>(n1<sp/>&lt;=<sp/>n3))<sp/>||<sp/>((n3<sp/>&lt;=<sp/>n1)<sp/>&amp;&amp;<sp/>(n1<sp/>&lt;=<sp/>n2)))</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n1;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//check<sp/>if<sp/>n2<sp/>is<sp/>the<sp/>middle<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((n1<sp/>&lt;=<sp/>n2)<sp/>&amp;&amp;<sp/>(n2<sp/>&lt;=<sp/>n3))<sp/>||<sp/>((n2<sp/>&lt;=<sp/>n1)<sp/>&amp;&amp;<sp/>(n3<sp/>&lt;=<sp/>n2)))</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n2;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n3;</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/Jeong/git/04/Modules/Median/median.c"/>
  </compounddef>
</doxygen>
