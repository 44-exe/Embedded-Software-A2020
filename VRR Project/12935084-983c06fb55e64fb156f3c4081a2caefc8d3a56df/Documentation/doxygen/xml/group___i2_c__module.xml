<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="group___i2_c__module" kind="group">
    <compoundname>I2C_module</compoundname>
    <title>I2C module documentation</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group___i2_c__module_1gaaf105ae5beaca1dee30ae54530691fce" prot="public" static="no" strong="no">
        <type></type>
        <name>@16</name>
        <enumvalue id="group___i2_c__module_1ggaaf105ae5beaca1dee30ae54530691fceaaade5e53e88cf231292cd1142cce2afe" prot="public">
          <name>STATE_IDLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___i2_c__module_1ggaaf105ae5beaca1dee30ae54530691fceaa157a2e8e174dd72f28ea3861b72b5e8" prot="public">
          <name>STATE_DEVADDRESS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___i2_c__module_1ggaaf105ae5beaca1dee30ae54530691fcea601fe6d2883039dd9cfeca12c65ea3c8" prot="public">
          <name>STATE_DEVADDRESS2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___i2_c__module_1ggaaf105ae5beaca1dee30ae54530691fcea1844f314039d713261df43a309145446" prot="public">
          <name>STATE_START</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___i2_c__module_1ggaaf105ae5beaca1dee30ae54530691fceaea29ca0c56b2f217665b0971c7301f27" prot="public">
          <name>STATE_RESTART</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___i2_c__module_1ggaaf105ae5beaca1dee30ae54530691fceab0172924b93528706fe07b6a9ccdf9ee" prot="public">
          <name>STATE_REGADDRESS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___i2_c__module_1ggaaf105ae5beaca1dee30ae54530691fcea3d3ea9fb2db0c6039f1065b6ee452fe9" prot="public">
          <name>STATE_DATA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___i2_c__module_1ggaaf105ae5beaca1dee30ae54530691fceaacbe6cbcad841c9cfd0cbf67bd0784d2" prot="public">
          <name>STATE_STOP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" line="28" column="1" bodyfile="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" bodystart="27" bodyend="37"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group___i2_c__module_1ga35758fe340325ce2544f2c0aeccfef4d" prot="public" static="no" mutable="no">
        <type><ref refid="struct_t_i2_c_module" kindref="compound">TI2CModule</ref></type>
        <definition>TI2CModule I2CModule</definition>
        <argsstring></argsstring>
        <name>I2CModule</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>I2C module structure variable </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" line="25" column="12" bodyfile="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___i2_c__module_1ga8663e9c5eb49bd58dcdc2189899579cc" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool IntRead</definition>
        <argsstring></argsstring>
        <name>IntRead</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Boolean variable for IntRead </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" line="39" column="13" bodyfile="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___i2_c__module_1gacdcc011521033f86399a379eaf35a1ce" prot="public" static="yes" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t NbBytes</definition>
        <argsstring></argsstring>
        <name>NbBytes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Total number of bytes for IntRead </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" line="40" column="16" bodyfile="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___i2_c__module_1ga6f183b555714685bf2dfdb2e269e8366" prot="public" static="yes" mutable="no">
        <type>uint8_t *</type>
        <definition>uint8_t* Data</definition>
        <argsstring></argsstring>
        <name>Data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to the data for IntRead </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" line="41" column="16" bodyfile="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___i2_c__module_1gae6422528df083efd8e8e1600404d407a" prot="public" static="no" mutable="no">
        <type>const port_pin_config_t</type>
        <definition>const port_pin_config_t I2C0_CONFIG</definition>
        <argsstring></argsstring>
        <name>I2C0_CONFIG</name>
        <initializer>=
{
    .pullSelect          = kPORT_PullDisable,
    .slewRate            = kPORT_SlowSlewRate,
    .passiveFilterEnable = kPORT_PassiveFilterDisable,
    .openDrainEnable     = kPORT_OpenDrainEnable,
    .driveStrength       = kPORT_LowDriveStrength,
    .mux                 = kPORT_MuxAlt5,
    .lockRegister        = kPORT_UnlockRegister
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" line="43" column="25" bodyfile="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___i2_c__module_1ga9d0e9da6860d17a91aa55eeeddebb5cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool I2C_Init</definition>
        <argsstring>(const uint32_t moduleClk, const TI2CModule *const aI2CModule)</argsstring>
        <name>I2C_Init</name>
        <param>
          <type>const uint32_t</type>
          <declname>moduleClk</declname>
        </param>
        <param>
          <type>const <ref refid="struct_t_i2_c_module" kindref="compound">TI2CModule</ref> *const</type>
          <declname>aI2CModule</declname>
        </param>
        <briefdescription>
<para>Sets up the I2C before first use. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>moduleClk</parametername>
</parameternamelist>
<parameterdescription>
<para>The module clock in Hz. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aI2CModule</parametername>
</parameternamelist>
<parameterdescription>
<para>is a structure containing the operating conditions for the module. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>BOOL - TRUE if the I2C module was successfully initialized. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" line="60" column="6" bodyfile="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" bodystart="60" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="group___i2_c__module_1ga0d6844ce590bbf5cc557fdf0747ad551" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_SelectSlaveDevice</definition>
        <argsstring>(const uint8_t slaveAddress)</argsstring>
        <name>I2C_SelectSlaveDevice</name>
        <param>
          <type>const uint8_t</type>
          <declname>slaveAddress</declname>
        </param>
        <briefdescription>
<para>Selects the current slave device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slaveAddress</parametername>
</parameternamelist>
<parameterdescription>
<para>The slave device address. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" line="126" column="6" bodyfile="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="group___i2_c__module_1ga6be376f4cbdfc0de812477c6168f2b39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_WaitAck</definition>
        <argsstring>(void)</argsstring>
        <name>I2C_WaitAck</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Waits for the acknowledgment from the slave device. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" line="134" column="6" bodyfile="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" bodystart="134" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="group___i2_c__module_1gaa5900a0050d030752f7e217492b33e7b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void I2C_WaitIdle</definition>
        <argsstring>(void)</argsstring>
        <name>I2C_WaitIdle</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Waits until the bus idle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" line="146" column="13" bodyfile="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" bodystart="146" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="group___i2_c__module_1gafb8f665f3d406c181fb1416d3d05d65f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void I2C_StartSignal</definition>
        <argsstring>(void)</argsstring>
        <name>I2C_StartSignal</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Send a start signal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" line="156" column="13" bodyfile="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" bodystart="156" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="group___i2_c__module_1gaf0e9cbcee4cab5d5752f5ded7a493a24" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void I2C_StopSignal</definition>
        <argsstring>(void)</argsstring>
        <name>I2C_StopSignal</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Send a stop signal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" line="166" column="13" bodyfile="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" bodystart="166" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="group___i2_c__module_1gae2136dd5673026fe692995d910b45af3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void I2C_ArbitrationLost</definition>
        <argsstring>(void)</argsstring>
        <name>I2C_ArbitrationLost</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check and clear the arbitration flag. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" line="176" column="13" bodyfile="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" bodystart="176" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="group___i2_c__module_1gacaac94d86a7213791fb691d57c6f278b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_Write</definition>
        <argsstring>(const uint8_t registerAddress, const uint8_t data)</argsstring>
        <name>I2C_Write</name>
        <param>
          <type>const uint8_t</type>
          <declname>registerAddress</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Write a byte of data to a specified register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>registerAddress</parametername>
</parameternamelist>
<parameterdescription>
<para>The register address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The 8-bit data to write. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" line="183" column="6" bodyfile="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" bodystart="183" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="group___i2_c__module_1ga3692682bb1cb84e1a3d0c31195451bd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_PollRead</definition>
        <argsstring>(const uint8_t registerAddress, uint8_t *const data, const uint8_t nbBytes)</argsstring>
        <name>I2C_PollRead</name>
        <param>
          <type>const uint8_t</type>
          <declname>registerAddress</declname>
        </param>
        <param>
          <type>uint8_t *const</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>nbBytes</declname>
        </param>
        <briefdescription>
<para>Reads data of a specified length starting from a specified register. </para>
        </briefdescription>
        <detaileddescription>
<para>Uses polling as the method of data reception. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>registerAddress</parametername>
</parameternamelist>
<parameterdescription>
<para>The register address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to store the bytes that are read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to read. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" line="209" column="6" bodyfile="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" bodystart="209" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="group___i2_c__module_1ga3685b2f03da2fa00b0cb671a0cce4f3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_IntRead</definition>
        <argsstring>(const uint8_t registerAddress, uint8_t *const data, const uint8_t nbBytes)</argsstring>
        <name>I2C_IntRead</name>
        <param>
          <type>const uint8_t</type>
          <declname>registerAddress</declname>
        </param>
        <param>
          <type>uint8_t *const</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>nbBytes</declname>
        </param>
        <briefdescription>
<para>Reads data of a specified length starting from a specified register. </para>
        </briefdescription>
        <detaileddescription>
<para>Uses interrupts as the method of data reception. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>registerAddress</parametername>
</parameternamelist>
<parameterdescription>
<para>The register address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to store the bytes that are read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to read. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" line="257" column="6" bodyfile="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" bodystart="257" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="group___i2_c__module_1ga8e817e99d2a59e5f48e4ff0c79e7eef5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C0_IRQHandler</definition>
        <argsstring>(void)</argsstring>
        <name>I2C0_IRQHandler</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>I2C interrupt request handler. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" line="311" column="6" bodyfile="C:/Users/Jeong/git/04/Modules/I2C/I2C.c" bodystart="311" bodyend="362"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
